// // ** ================================================================================ ** //

// // COHESION

// // ** ================================================================================ ** //

// // In object oriented program languages we have this concept of Cohesion
// // which basically means things that are related should be part of one unit

// // Back to the interface example in 5.custom_type.ts this is a perfect example
// // where we violeted the Cohesion principle: the concept of drawing a point is
// // highly related to the structure of a point so drawPoint should not be a
// // separate function

// // We can introduce here the concept of Class
// // -> Groups of variables(properties) and functions(methods) that are highly related

// // ** ================================================================================ ** //

// // in this example unfortunately we can't move those 2 functions in the
// // interface because interfaces are purely for declaration they can't include
// // any implementation (methods, algorithm)

// interface OldPoint {
//   x: number;
//   y: number;
//   //   we can only add the signature of a function
//   draw: () => void;
//   //   the implementation of this draw function is somewhere else
// }

// let drawPoint2 = (point: OldPoint) => {
//   // code...
// };

// let getDistance = (pointA: OldPoint, pointB: OldPoint) => {
//   // code...
// };

// drawPoint2({ x: 1, y: 2 });

// ** ================================================================================ ** //

// So how we can apply the Cohesion principle here?

// ** ================================================================================ ** //

class Point {
  // x and y are called fields that we use for storing data
  x: number;
  y: number;

  // these two functions are called methods
  draw() {
    // code...
    console.log("X:" + this.x + ", Y:" + this.y);
  }
  getDitance(another: Point) {
    // code ...
  }
}

const point = new Point();
point.draw();

// Now let's try to compile this code first comment out everything until line :40
// What do you expect if you compile this code?
// Do you see any problem? Why is that? How we can fix it?

// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *
// * --------------------------------------------------------------------------------- *

// When defining an object of custom type we explicitly need to allocate memory to it
// new keyword solution:
// let point= new Point();
